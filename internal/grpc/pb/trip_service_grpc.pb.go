// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/grpc/trip_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TripService_SearchTripPreview_FullMethodName     = "/trip_service.TripService/SearchTripPreview"
	TripService_ConfirmBooking_FullMethodName        = "/trip_service.TripService/ConfirmBooking"
	TripService_GetIncompletedBooking_FullMethodName = "/trip_service.TripService/GetIncompletedBooking"
	TripService_UpdateBookingStatus_FullMethodName   = "/trip_service.TripService/UpdateBookingStatus"
	TripService_GetBookingHistory_FullMethodName     = "/trip_service.TripService/GetBookingHistory"
)

// TripServiceClient is the client API for TripService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TripServiceClient interface {
	SearchTripPreview(ctx context.Context, in *SearchTripPreviewRequest, opts ...grpc.CallOption) (*SearchTripPreviewResponse, error)
	ConfirmBooking(ctx context.Context, in *ConfirmBookingRequest, opts ...grpc.CallOption) (*ConfirmBookingResponse, error)
	GetIncompletedBooking(ctx context.Context, in *GetIncompletedBookingRequest, opts ...grpc.CallOption) (*GetIncompletedBookingResponse, error)
	UpdateBookingStatus(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*UpdateBookingResponse, error)
	GetBookingHistory(ctx context.Context, in *GetBookingHistoryRequest, opts ...grpc.CallOption) (*GetBookingHistoryResponse, error)
}

type tripServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTripServiceClient(cc grpc.ClientConnInterface) TripServiceClient {
	return &tripServiceClient{cc}
}

func (c *tripServiceClient) SearchTripPreview(ctx context.Context, in *SearchTripPreviewRequest, opts ...grpc.CallOption) (*SearchTripPreviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTripPreviewResponse)
	err := c.cc.Invoke(ctx, TripService_SearchTripPreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) ConfirmBooking(ctx context.Context, in *ConfirmBookingRequest, opts ...grpc.CallOption) (*ConfirmBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmBookingResponse)
	err := c.cc.Invoke(ctx, TripService_ConfirmBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetIncompletedBooking(ctx context.Context, in *GetIncompletedBookingRequest, opts ...grpc.CallOption) (*GetIncompletedBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIncompletedBookingResponse)
	err := c.cc.Invoke(ctx, TripService_GetIncompletedBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) UpdateBookingStatus(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*UpdateBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookingResponse)
	err := c.cc.Invoke(ctx, TripService_UpdateBookingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetBookingHistory(ctx context.Context, in *GetBookingHistoryRequest, opts ...grpc.CallOption) (*GetBookingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingHistoryResponse)
	err := c.cc.Invoke(ctx, TripService_GetBookingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TripServiceServer is the server API for TripService service.
// All implementations must embed UnimplementedTripServiceServer
// for forward compatibility.
type TripServiceServer interface {
	SearchTripPreview(context.Context, *SearchTripPreviewRequest) (*SearchTripPreviewResponse, error)
	ConfirmBooking(context.Context, *ConfirmBookingRequest) (*ConfirmBookingResponse, error)
	GetIncompletedBooking(context.Context, *GetIncompletedBookingRequest) (*GetIncompletedBookingResponse, error)
	UpdateBookingStatus(context.Context, *UpdateBookingRequest) (*UpdateBookingResponse, error)
	GetBookingHistory(context.Context, *GetBookingHistoryRequest) (*GetBookingHistoryResponse, error)
	mustEmbedUnimplementedTripServiceServer()
}

// UnimplementedTripServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTripServiceServer struct{}

func (UnimplementedTripServiceServer) SearchTripPreview(context.Context, *SearchTripPreviewRequest) (*SearchTripPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTripPreview not implemented")
}
func (UnimplementedTripServiceServer) ConfirmBooking(context.Context, *ConfirmBookingRequest) (*ConfirmBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBooking not implemented")
}
func (UnimplementedTripServiceServer) GetIncompletedBooking(context.Context, *GetIncompletedBookingRequest) (*GetIncompletedBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncompletedBooking not implemented")
}
func (UnimplementedTripServiceServer) UpdateBookingStatus(context.Context, *UpdateBookingRequest) (*UpdateBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookingStatus not implemented")
}
func (UnimplementedTripServiceServer) GetBookingHistory(context.Context, *GetBookingHistoryRequest) (*GetBookingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingHistory not implemented")
}
func (UnimplementedTripServiceServer) mustEmbedUnimplementedTripServiceServer() {}
func (UnimplementedTripServiceServer) testEmbeddedByValue()                     {}

// UnsafeTripServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripServiceServer will
// result in compilation errors.
type UnsafeTripServiceServer interface {
	mustEmbedUnimplementedTripServiceServer()
}

func RegisterTripServiceServer(s grpc.ServiceRegistrar, srv TripServiceServer) {
	// If the following call pancis, it indicates UnimplementedTripServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TripService_ServiceDesc, srv)
}

func _TripService_SearchTripPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTripPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).SearchTripPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_SearchTripPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).SearchTripPreview(ctx, req.(*SearchTripPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_ConfirmBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).ConfirmBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_ConfirmBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).ConfirmBooking(ctx, req.(*ConfirmBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetIncompletedBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncompletedBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetIncompletedBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetIncompletedBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetIncompletedBooking(ctx, req.(*GetIncompletedBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_UpdateBookingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).UpdateBookingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_UpdateBookingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).UpdateBookingStatus(ctx, req.(*UpdateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetBookingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetBookingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetBookingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetBookingHistory(ctx, req.(*GetBookingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TripService_ServiceDesc is the grpc.ServiceDesc for TripService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TripService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trip_service.TripService",
	HandlerType: (*TripServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchTripPreview",
			Handler:    _TripService_SearchTripPreview_Handler,
		},
		{
			MethodName: "ConfirmBooking",
			Handler:    _TripService_ConfirmBooking_Handler,
		},
		{
			MethodName: "GetIncompletedBooking",
			Handler:    _TripService_GetIncompletedBooking_Handler,
		},
		{
			MethodName: "UpdateBookingStatus",
			Handler:    _TripService_UpdateBookingStatus_Handler,
		},
		{
			MethodName: "GetBookingHistory",
			Handler:    _TripService_GetBookingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/trip_service.proto",
}
